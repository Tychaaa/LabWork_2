#include "CharStack.h"

// Конструктор инициализирует стек с начальным размером
CharStack::CharStack(int maxSize) : size(maxSize)
{
    p = new char[size]; // Выделение памяти для стека
    if (!p) 
    {
        // Завершение программы в случае ошибки
        cerr << "Ошибка при выделении памяти" << endl;
        exit(1);
    }
    tos = p;            // Начало стека
    bos = p + size - 1; // Конец стека
}

// Деструктор освобождает выделенную память
CharStack::~CharStack()
{
    delete[] p; // Освобождение памяти
}

// Добавление элемента в стек
void CharStack::push(char ch)
{
    if (p >= bos) 
    {
        // Возврат, если стек полон
        cout << "Стек полон" << endl;
        return;
    }
    *p = ch;    // Сохранение элемента в текущей позиции
    p++;        // Перемещение указателя на следующую позицию
}

// Удаление элемента из стека
char CharStack::pop()
{
    if (p == tos) 
    {
        // Возврат 0, если стек пуст
        cout << "Стек пуст" << endl;
        return 0;
    }
    p--;        // Перемещение указателя обратно на верхний элемент
    return *p;  // Возвращение верхнего элемента
}

// Проверка, пуст ли стек
bool CharStack::isEmpty()
{
    return (p == tos);
}